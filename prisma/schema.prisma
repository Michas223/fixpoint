// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["queryCompiler"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phoneNumber   String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  orders        Order[] // Dodano relację do zleceń

  phoneNumberVerified Boolean?
  role                String?
  banned              Boolean?
  banReason           String?
  banExpires          DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrderStatus {
  PENDING
  DELIVERY
  DIAGNOZE
  WAITING_FOR_PARTS
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OrderDeliveryMethod {
  MYSELF
  TECH_ARRIVAL
  DELIVERY
}

model Order {
  id                     Int                  @id @default(autoincrement())
  title                  String
  description            String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  userId                 String
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  price                  Int?
  deliveryMethod         OrderDeliveryMethod?
  currentStatus          OrderStatus          @default(PENDING)
  history                OrderHistory[]
  arrivedAt              DateTime?
  expectedCompletionDate DateTime?

  @@index([userId])
  @@map("order")
}

model OrderHistory {
  id        String      @id @default(cuid())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  status    OrderStatus
  message   String
  createdAt DateTime    @default(now())
}
